[
  {
    "title": "일급 객체와 JS 함수 뜯어보기",
    "link": "https://velog.io/@gawgjiug/%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%99%80-JS-%ED%95%A8%EC%88%98-%EB%9C%AF%EC%96%B4%EB%B3%B4%EA%B8%B0",
    "description": "<h3 id=\"일급-객체\">일급 객체</h3>\n<blockquote>\n<p>일급객체란 다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 가리킨다.</p>\n</blockquote>\n<p><strong>일급객체</strong>란 구체적으론 다음과 같은 조건을 만족하는 객체를 <code>일급 객체</code> 라 한다.</p>\n<ol>\n<li><p>무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.</p>\n</li>\n<li><p>변수나 자료구조(객체,배열 등)에 저장할 수 있다.</p>\n</li>\n<li><p>함수의 매개변수에 전달할 수 있다.</p>\n</li>\n<li><p>함수의 반환 값으로 사용할 수 있다.</p>\n</li>\n</ol>\n<p>자바스크립트의 함수는 위의 조건을 모두 만족하는 일급 객체이다.</p>\n<p>다른 건 다 직관적으로 이해할 수 있겠지만, 헷갈릴 수 있는 1번 조건에 대해 알아보자</p>\n<pre><code class=\"language-javascript\">// 1. 무명의 리터럴로 생성 후 즉시 실행 (IIFE - 즉시 실행 함수 표현)\n(function() {\n  console.log(&#39;이 함수는 무명 리터럴로 런타임에 생성되고 바로 실행됩니다!&#39;);\n})();</code></pre>\n<ul>\n<li><p>위 코드는 함수를 <code>function</code> 키워드로 정의했지만 이름을 붙이지 않은 <strong>익명 함수</strong> 이다</p>\n</li>\n<li><p>이 익명 함수는 정의와 동시에 <strong>즉시 실행(IIFE) 된다</strong> 이런 방식은 함수를 특정 시점에 런타임에서 직접 생성하고 바로 사용하고자 할 때 많이 활용된다.</p>\n</li>\n<li><p>이런 방식은 함수를 특정 시점에 <code>런타임</code> 에서 직접 생성하고 바로 사용하고자 할 때 많이 활용된다. </p>\n</li>\n<li><p>여기서 <code>런타임</code>에 생성 가능하다는 의미가 무엇이냐??</p>\n</li>\n</ul>\n<blockquote>\n<p>런타임은 프로그램이 실행 중일 때를 의미한다. 즉, 런타임에 생성 가능하다는 것은 프로그램이 실행되는 도중에 필요한 시점에 함수를 새로 생성하고 사용할 수 있는 뜻을 말한다.</p>\n</blockquote>\n<h4 id=\"런타임-생성의-차이\">런타임 생성의 차이</h4>\n<pre><code class=\"language-javascript\">function sayHello() {\n  console.log(&quot;Hello!&quot;);\n}\nsayHello();  // &quot;Hello!&quot; 출력</code></pre>\n<ul>\n<li><p>이렇게 정적으로 함수를 선언한 경우, 프로그램이 시작되기 전에 미리 정의되는 것이다.</p>\n</li>\n<li><p>다시 말하면 이 함수는 코드가 실행되기 전에 메모리에 올라가 공간을 차지하는 것 </p>\n</li>\n</ul>\n<hr>\n<h4 id=\"변수에-무명-함수-저장\">변수에 무명 함수 저장</h4>\n<pre><code class=\"language-javascript\">const greet = function() {\n  console.log(&quot;Hello, World!&quot;);\n};\ngreet();  // &quot;Hello, World!&quot; 출력</code></pre>\n<ul>\n<li><p>이 경우 익명함수를 프로그램이 실행되는 도중 즉, 런타임에 생성한다.</p>\n</li>\n<li><p>함수를 정의한 코드가 실행될 때 비로소 메모리에 함수가 생성되고, 변수 <code>greet</code> 에 저장된다.</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"그래서-리터럴이란\">그래서 리터럴이란?</h4>\n<ul>\n<li><p>리터럴이란 코드를 작성할 때 고정된 값 자체를 표현하는 방식을 말한다.</p>\n</li>\n<li><p>프로그래밍 언어에서, 리터럴은 값을 직접 코드에 명시하는 것을 말한다.</p>\n</li>\n</ul>\n<p>즉, 함수 리터럴은 함수에 이름을 붙이지 않고, 곧 바로 코드에서 익명함수로 사용할 수 있는 것을 의미한다.</p>\n<hr>\n<h4 id=\"그래서-런타임-생성과-사용이-왜-유용한데\">그래서 런타임 생성과 사용이 왜 유용한데?</h4>\n<ul>\n<li><p>런타임에 함수를 생성한다는 것은 <strong>유연하게 함수</strong> 필요할 때 만들어 사용할 수 있다는 뜻을 말한다.</p>\n</li>\n<li><p>이를 통해 코드가 동적으로 변경되는 상황에 대응할 수 있다, 예를 들어 클릭 이벤트가 발생할 때 마다 새로운 함수를 만들고 호출할 수 있는 것</p>\n</li>\n</ul>\n<pre><code class=\"language-javascript\">document.getElementById(&#39;myButton&#39;).addEventListener(&#39;click&#39;, function() {\n  console.log(&#39;버튼이 클릭되었습니다!&#39;);\n});</code></pre>\n<ul>\n<li><p>우리가 자주보는 이 문법은 사실 버튼 클릭 시 익명 함수를 즉석에서(런타임에) 생성하고 실행하는 것이다. </p>\n</li>\n<li><p>미리 정의된 함수 없이 이벤트가 발생할 때 마다 필요한 함수를 동적으로 생성하기 때문에 메모리 관리의 효율성 또한 상승할 수 있는 것</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"함수의-전달\">함수의 전달</h3>\n<p>일급 객체로서 함수가 가지는 가장 큰 특징은 함수의 매개변수에 전달할 수 있으며, 함수의 반환 값으로 사용할 수 있다는 것이다.</p>\n<blockquote>\n<p>이는 함수형 프로그래밍을 가능케 하는 자바스크립트의 장점 중 하나다</p>\n</blockquote>\n<pre><code class=\"language-javascript\">function repeatAction(n, action) {\n  for (let i = 0; i &lt; n; i++) {\n    action();  // 전달된 함수 실행\n  }\n}\n\n// &#39;Hello&#39;를 3번 출력하는 익명 함수 전달\nrepeatAction(3, function() {\n  console.log(&quot;Hello!&quot;);\n});</code></pre>\n<ul>\n<li>이처럼 함수를 매개변수로 전달해 특정 로직을 유연하게 적용하는 것이 가능 한 것.</li>\n</ul>\n<hr>\n<h3 id=\"함수-객체의-프로퍼티\">함수 객체의 프로퍼티</h3>\n<p>브라우저 콘솔에서 <code>console.dir</code> 를 입력해서 함수 객체의 내부를 쉽게 들여다 볼 수 있다.</p>\n<blockquote>\n<p>왜 함수 객체의 프로퍼티를 이해해야 할까?</p>\n</blockquote>\n<ol>\n<li>함수도 객체이기 때문</li>\n</ol>\n<ul>\n<li><p>자바스크립트에서는 함수도 일급 객체로 취급 되기 때문이다. 이는 함수가 변수에 할당되거나, 다른 함수의 인자로 전달, 함수에서 반환될 수 있다는 의미이다.</p>\n</li>\n<li><p>함수를 객체처럼 다룰 수 있기 때문에 프로퍼티와 메서드를 추가하거나 내장된 프로퍼티에 접근하는 것 또한 가능하기 때문.</p>\n</li>\n</ul>\n<pre><code class=\"language-javascript\">function exampleFunction(a, b) {\n  return a + b;\n}\n\n// 브라우저 콘솔에서 함수 객체의 내부를 확인\nconsole.dir(exampleFunction);\n</code></pre>\n<pre><code class=\"language-lua\">ƒ exampleFunction(a, b)\n  arguments: null\n  caller: null\n  length: 2\n  name: &quot;exampleFunction&quot;\n  prototype: {constructor: ƒ}\n  [[FunctionLocation]]: script.js:1\n  [[Scopes]]: Scopes[2]</code></pre>\n<p><code>console.dir</code> 은 객체의 내부 구조를 트리 형태로 펼쳐 보여주는 것이다. 이를 통해 함수 객체의 여러 프로퍼티들을 확인할 수 있는 것!</p>\n<h4 id=\"argument-프로퍼티\">argument 프로퍼티</h4>\n<p>함수 객체의 <code>argument</code> 프로퍼티 값은 함수 호출 시 전달 된 인수들의 정보를 담고 있는 argument 객체이다.</p>\n<p>마치 배열 객체처럼 순회 가능하다는 특징을 가지고 있다. 하지만 진짜 배열은 아니기 대문에 <code>map</code> 이나 <code>forEach</code> 와 같은 배열 메서드를 직접 사용할 수는 없고 Array 로 변환해야 한다.</p>\n<p>선언된 매개변수의 개수보다 인수를 적게 전달했을 경우 인수가 전달되지 않은 매개변수는 <code>undefined</code> 로 초기화된 상태이다</p>\n<pre><code class=\"language-javascript\">function example(a, b) {\n  console.log(&quot;a:&quot;, a);  // 첫 번째 인수\n  console.log(&quot;b:&quot;, b);  // 두 번째 인수\n  console.log(&quot;arguments:&quot;, arguments);  // 모든 인수 출력\n\n  // arguments 객체 순회\n  for (let i = 0; i &lt; arguments.length; i++) {\n    console.log(`arguments[${i}]:`, arguments[i]);\n  }\n}\n\n// 3개의 인수를 전달했지만 매개변수는 2개만 선언됨\nexample(1, 2, 3);</code></pre>\n<pre><code class=\"language-makefile\">a: 1\nb: 2\narguments: [1, 2, 3]\narguments[0]: 1\narguments[1]: 2\narguments[2]: 3</code></pre>\n<ol>\n<li><p>매개변수 a, b에는 전달된 첫 번째, 두 번째 인수가 각각 할당됩니다.</p>\n</li>\n<li><p>초과된 인수(여기서는 3)는 무시되지 않고 arguments 객체에 모두 담깁니다.</p>\n</li>\n<li><p><code>arguments</code> 객체를 순회하여 모든 전달된 인수를 확인할 수 있습니다.</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"사용자-정의-프로퍼티-추가-가능\">사용자 정의 프로퍼티 추가 가능</h3>\n<ul>\n<li>말했듯이 함수는 <code>객체</code> 이므로 사용자 정의 프로퍼티를 추가할 수 있다.</li>\n</ul>\n<pre><code class=\"language-javascript\">function greet() {\n  console.log(&quot;Hello!&quot;);\n}\ngreet.language = &quot;Korean&quot;;\n\nconsole.dir(greet);\nconsole.log(greet.language); // 출력: Korean\n</code></pre>\n<ul>\n<li>뿐만 아니라 [[Scope]] 같은 내부 정보도 확인할 수 있기 때문에 클로저를 이해하거나 디버깅할 때 유용하다</li>\n</ul>\n<hr>\n<h3 id=\"나머지-주요-프로퍼티\">나머지 주요 프로퍼티</h3>\n<h4 id=\"caller\">caller</h4>\n<ul>\n<li>이 함수가 어디서 호출되었는지 참조한다. 현재 호출한 함수가 없을 경우 <code>null</code></li>\n</ul>\n<h4 id=\"length\">length</h4>\n<ul>\n<li>함수가 기대하는 매개변수의 개수를 말한다. 위 예제에서는 두 개의 인수를 받기 때문에 <code>2</code> 이다.</li>\n</ul>\n<h4 id=\"name\">name</h4>\n<ul>\n<li>함수의 이름을 말한다. 익명 함수일 경우 <code>anoymous</code> 가 된다.</li>\n</ul>\n<h4 id=\"prototype\">prototype</h4>\n<ul>\n<li>함수가 생성자 함수로 사용될 때 새로 생성된 객체에 연결되는 프로토타입 객체를 말한다.</li>\n</ul>\n<h4 id=\"scopes\">[Scopes]</h4>\n<ul>\n<li>함수가 선언된 스코프 체인을 보여준다, 클로저를 사용한 경우 이 프로퍼티에서 클로저의 내부 상태를 확인할 수 있다.</li>\n</ul>\n",
    "pubDate": "Tue, 15 Oct 2024 14:16:57 GMT",
    "thumbnail": null
  },
  {
    "title": "숨바꼭질",
    "link": "https://velog.io/@gawgjiug/%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88",
    "description": "<p><a href=\"https://www.acmicpc.net/problem/13549\">13549번 : 숨바꼭질3</a></p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/ca7a7d06-8a8d-4bb7-90d8-b4c17dc11c10/image.png\" alt=\"\"></p>\n<pre><code class=\"language-java\">package Gold_5;\n\nimport javax.xml.soap.Node;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\n\npublic class HideAndSeek {\n    //진행되는 연산은 3종류 +1,-1,*2 이다 이때 연산 순서도 중요함\n    static int min = Integer.MAX_VALUE;\n    static int n,k;\n    static boolean[] visited;\n    static int max = 100000; //수빈이가 이동할 수 있는 최대위치\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        n = sc.nextInt();\n        k = sc.nextInt();\n\n        visited = new boolean[max+1]; //위치 범위는 0~10000\n        bfs();\n        System.out.println(min);\n\n\n    }\n\n    private static void bfs() {\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        q.offer(new Node(n,0)); //수빈이의 초기 위치와 시간(0)을 큐에 넣음\n        while(!q.isEmpty()) {\n            Node node = q.poll(); //현재위치를 node로 꺼내고 그 위치를 방문한 것으로 처리\n            visited[node.x] = true;\n            if(node.x == k) min = Math.min(min, node.time); //현재 위치가 동생의 위치 k와 같으면 최소시간 갱신\n\n            if(node.x * 2 &lt;= max &amp;&amp; visited[node.x * 2] == false) q.offer(new Node(node.x * 2, node.time));\n            if(node.x + 1 &lt;= max &amp;&amp; visited[node.x + 1] == false) q.offer(new Node(node.x + 1, node.time + 1));\n            if(node.x - 1 &gt;= 0 &amp;&amp; visited[node.x - 1] == false) q.offer(new Node(node.x - 1, node.time + 1));\n        }\n    }\n    public static class Node{\n        int x;\n        int time;\n        public Node(int x, int time){\n            this.x  = x;\n            this.time  = time;\n        }\n    }\n}</code></pre>\n<p>문제는 주어진 시작 위치 <code>n</code> 에서 동생의 위치 <code>k</code> 까지 이동하는 데 필요한 최소 시간을 계산하는 것이다.</p>\n<p>수빈이는 최대 100,000 까지의 위치로 이동할 수 있다. </p>\n<h3 id=\"접근-방식\">접근 방식</h3>\n<p>이 문제를 해결하기 위해 BFS(너비 우선 탐색) 알고리즘을 사용했다. BFS는 최단 경로 문제에 적합한 알고리즘으로 모든 가능한 위치를 탐색하며 최단 경로를 찾아내기 때문임.</p>\n<h3 id=\"코드-작동-방식\">코드 작동 방식</h3>\n<ol>\n<li><p>초기화 : 사용자의 입력을 받아 수빈이의 초기 위치 n과 동생의 위치를 설정 방문한 위치를 기록하기 위한 배열 <code>visited</code> 를 초기화함</p>\n</li>\n<li><p>BFS 실행: bfs 메서드에서 큐를 사용하여 수빈이의 위치와 경과 시간을 저장합니다. 큐에서 현재 위치를 꺼내고, 동생의 위치와 비교하여 최소 시간을 업데이트합니다.</p>\n</li>\n<li><p>이동 처리: 현재 위치에서 세 가지 이동 방법(두 배로 이동, +1 이동, -1 이동)을 모두 검사하고, 유효한 이동일 경우 큐에 추가합니다.</p>\n</li>\n<li><p>최종 결과 출력: 동생의 위치에 도달하는 최소 시간을 출력합니다.</p>\n</li>\n</ol>\n",
    "pubDate": "Fri, 11 Oct 2024 08:55:06 GMT",
    "thumbnail": null
  },
  {
    "title": "쿠키와 세션 개념",
    "link": "https://velog.io/@gawgjiug/%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98-%EA%B0%9C%EB%85%90",
    "description": "<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/4116e816-5638-4019-88db-0c6875a70883/image.png\" alt=\"\"></p>\n<h4 id=\"http의-특징과-쿠키와-세션을-사용하는-이유\">HTTP의 특징과 쿠키와 세션을 사용하는 이유</h4>\n<ul>\n<li><p>쿠키와 세션을 사용하는 이유는 바로 HTTP 프로토콜의 특성이자 약점을 보완하기 위함이다</p>\n</li>\n<li><p>기본적으로 HTTP 프로토콜 환경은 <code>connectionless</code> <code>stateless</code> 한 특성을 가지기 때문에 서버는 클라이언트가 누구인지 매번 확인해야 한다. </p>\n</li>\n<li><p>이러한 특성을 보완하기 위해서 쿠키와 세션을 사용하게 되는 것</p>\n</li>\n</ul>\n<blockquote>\n<p>connectionless 란?\n클라이언트가 요청을 한 후 응답을 받으면 그 연결을 끊어 버리는 특징을 말한다.\nHTTP 는 먼저 클라이언트가 request 를 서버에 보내면 , 서버는 클라이언트 요청에 맞는 response 를 보내고 접속을 끊는 특성이 있다.</p>\n</blockquote>\n<blockquote>\n<p>stateless 란?\n통신이 끝나면 상태를 유지하지 않는 특징을 말한다.\n연결을 끊는 순간 클라이언트와 서버의 통신이 끝나며 상태 정보는 유지하지 않는 특성이 있다.\n쿠키와 세션은 위의 두 가지 특징을 해결하기 위해 사용한다.</p>\n</blockquote>\n<blockquote>\n<p>HTTP? 란?\nHTTP(HyperText Transfer Protocol)는 월드 와이드 웹(WWW)에서 정보를 주고받기 위한 프로토콜이다. 쉽게 말해, 웹 브라우저와 서버가 인터넷을 통해 데이터를 주고받을 때 사용하는 규칙을 말하는데, 주로 웹 페이지(HTML), 이미지, 동영상, 파일 등의 데이터를 주고받는 데 사용된다.</p>\n</blockquote>\n<p>즉, 요청이 끝나면 서버는 유저가 누군지 잊어버리기 때문에, 요청 할 때마다. 우리가 누군지 <code>알려줘야</code> 한다는 것</p>\n<p>이를 하는 방법 중 하나가 <code>세션</code> 임 </p>\n<p>예를들어 <code>곽지욱</code> 이라는 유저가 있고 로그인 하고 싶다면 <code>유저명</code> 그리고 <code>비밀번호</code> 를 서버에 보내게 된다. </p>\n<p>비밀번호가 확인된다면 서버는 세션 DB에 <code>곽지욱</code> 이라는 유저를 생성한다 해당 세션에는 별도의 ID가 있고,</p>\n<p>해당 세션 ID는 쿠키를 통해 브라우저로 돌아오고 저장된다. 따라서 같은 웹 사이트의 다른 페이지로 이동하면 브라우저는 세션 ID를 갖고 있는 쿠키를 서버에게 보내게 된다.</p>\n<p>왜냐면 쿠키는 자동으로 보내지기 때문이다 </p>\n<p>서버는 들어오는 쿠키를 보고, 해당 세션 ID를 가지고 세션 DB를 확인할 것이고 거기서 해당 ID는 유저명 <code>곽지욱</code> 의 것이라는 것 알게되고. 그때 서버는 사용자를 구분할 수 있게 된다. </p>\n<p>이 작업이 끝나고 다른 페이지로 이동하게 되면 이 모든 프로세스가 반복되는 것</p>\n<p>여기서 중요한 건 모든 중요한 유저 데이터는 모두 서버에 있고 유저가 브라우저 상에서 갖고잇는 것은 세션 ID 뿐이라는 것이다.</p>\n<hr>\n<h4 id=\"쿠키cookie\">쿠키(Cookie)</h4>\n<ul>\n<li><p>쿠키란? 위에서 말했듯이 그저 세션 ID를 전달하기 위한 매개체일 뿐이다.</p>\n</li>\n<li><p>쿠키를 이용해서 서번는 나의 브라우저에 데이터를 넣을 수 있다.</p>\n</li>\n<li><p>사이트에 방문하면 브라우저는 서버에 <code>요청</code> 을 보내게 되는데, 서버는 이에 <code>response</code> (응답)을 할 것이고 , 그 <code>응답</code> 에는 모든 데이터와 내가 찾던 페이지 정보가 들어있다. </p>\n</li>\n<li><p>또한 그곳에는 브라우저에 저장하고자 하는 쿠키가 있을 수 있는 것이다.</p>\n</li>\n<li><p>이 쿠키는 내가 브라우저에 저장해두고 해당 웹 사이트에 방문할 때 마다 브라우저는 해당 쿠키도 요청과 함께 보내게 된다.</p>\n</li>\n<li><p>참고로 쿠키는 도메인에 따라 제한이 되는데, 이 말은 즉슨 유튜브가 준 쿠키는 유튜브 서버에만 보내지게 된다는 것이다.</p>\n</li>\n<li><p>그리고 쿠키는 유효기간을 가지고 있다. 유효기간에 따라 어떤 쿠키는 하루 혹은 한달 등.. 서버가 정한 기간에 따라 유효한 특징을 가지고 있다.</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"쿠키의-동작-방식-예시\">쿠키의 동작 방식 예시</h4>\n<p>그리고 쿠키는 인증 뿐만 아니라 여러가지 정보를 저장할 수 있는데, </p>\n<p>예를 들면 사용자가 웹 사이트 언어 설정을 바꾸면 서버는 쿠키를 브라우저에게 주고 사용자가 선택한 언어를 저장하게 된다.</p>\n<p>따라서 다음에 내가 해당 웹 사이트에 방문할 때 쿠키는 요청과 함께 서버로 보내지고 덕분에 서버는 쿠키가 기억해둔 언어설정의 페이지를 제공할 수 있는 것이다.</p>\n<hr>\n<h4 id=\"세션이란\">세션이란?</h4>\n<p>세션이란 이미 말했지만, 서버 측에서 사용자의 상태 정보를 관리하는 방식으로, 클라이언트와 서버 간의 지속적인 통신 상태를 유지하기 위해 사용된다. </p>\n<p>앞서 설명한 HTTP의 두 가지 특성으로 인해 서버는 클라이언트의 정보를 매번 새롭게 받아야 하는데,</p>\n<p>이를 해결하기 위해 서버가 클라이언트의 정보를 일정 시간 동안 저장하여, 각 요청에서 사용자를 식벽할 수 있도록 돕는 역할을 한다고 생각하면 된다.</p>\n<hr>\n<h4 id=\"세션의-동작-방식\">세션의 동작 방식</h4>\n<ol>\n<li><p>세션 생성 : 사용자가 웹에 로그인 하거나 중요한 작업을 수행할 때, 서버는 클라이언트의 정보를 서버 내부의 세션 저장소에 기록한다. </p>\n</li>\n<li><p>세션 ID 발급 : 서버는 클라이언트가 고유한 세션을 가질 수 있도록 세션 ID를 발급하고, 이 세션 ID는  클라이언트가 해당 서버에서 진행하는 활동을 식별하기 위한 고유 값이다. </p>\n</li>\n</ol>\n<p>세션 ID는 주로 쿠키에 담겨 클라이언트 측 브라우저에 저장된다.</p>\n<ol start=\"3\">\n<li><p>세션 유지: 클라이언트가 웹 사이트의 다른 페이지로 이동하거나 추가적인 요청을 보낼 때, 브라우저는 자동으로 쿠키게 저장된 세션 ID를 서버로 전달한다.</p>\n</li>\n<li><p>세션 종료 : 세션은 일정 시간이 지나면 만료되거나, 사용자가 로그아웃 하는 경우 명시적으로 삭제된다. </p>\n</li>\n</ol>\n",
    "pubDate": "Wed, 02 Oct 2024 07:45:20 GMT",
    "thumbnail": null
  },
  {
    "title": "SEO 와 시맨틱 마크업",
    "link": "https://velog.io/@gawgjiug/SEO-%EC%99%80-%EC%8B%9C%EB%A7%A8%ED%8B%B1-%EB%A7%88%ED%81%AC%EC%97%85",
    "description": "<p>최근에 <code>SEO</code> 그리고 <code>시맨틱 마크업</code> 에 대해 자주 이야기를 듣게되었다.</p>\n<p>우선 <code>SEO</code>가 무엇일까?</p>\n<h2 id=\"seo란\">SEO란?</h2>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/6bd09dc4-dedd-4f88-861d-a3b8bf5b58da/image.png\" alt=\"\"></p>\n<p>한국어로는 검색엔진 최적화, 영어로는 Search Engine Oprimization 을 줄여서 <code>SEO</code> 라고한다.</p>\n<p>한 마디로 <code>SEO</code> 는 웹사이트가 검색 엔진에서 더 잘 인식되고 순위가 높게 표시되도록 최적화 하는 과정을 말한다. 구글을 예로 들자면 검색 엔진은 웹 페이지의 콘텐츠를 <code>크롤링</code> 하고 이 정보를 기반으로 검색 결과를 노출시킨다.</p>\n<blockquote>\n<p>여기서 크롤링은 &#39;웹 상을 돌아다니면서 정보를 수집하는 행위&#39; 를 말한다.</p>\n</blockquote>\n<p>이때 <code>SEO</code>가 잘된 페이지는 검색 결과에서 상위에 노출되기 때문에 더 많은 사용자가 웹사이트를 방문하게 된다. 이로 인해 자연 검색(Natural Search) 트래픽이 증가하게 되는 것.</p>\n<h2 id=\"시맨틱-마크업이란\">시맨틱 마크업이란?</h2>\n<p>시맨틱 마크업은 Semantic(의미론적인) + Markup(HTML 태그로 문서를 작성하는 것) 의 합성어이다.</p>\n<p>즉,<code>시멘틱 마크업</code> 이란 의미론적인 HTML 태그를 작성하는 것이라고 할 수 있다. HTML 태그에는 각각의 의미가 존재한다. </p>\n<blockquote>\n<p>헤더/푸터에 header와 footer 사용\n메인 컨텐츠에 main과 section 사용\n내비게이션에 nav 사용</p>\n</blockquote>\n<p>이런식으로 각각 의미에 맞는 태그를 사용하는 것이다 흔한 말로 <code>div 떡칠</code> 을 하지않고 분명한 의미를 가진 태그들을 알맞게 사용하는 것이 중요하다는 것</p>\n<p>그리고 단순히 <code>SEO</code> 와 같은 성능 측면에서의 기대값이 존재하기 때문에 시멘틱 마크업을 해야한다가 아니라</p>\n<p><code>웹 접근성</code> 을 위해서도 필요한 작업이다. 웹 접근성은 장애인이나 노인 분들이 비장애인과 같이 웹 사이트에 접근하여 이해할 수 있도록 하는 것을 의미하는데, </p>\n<p>이때 스크린 리더라는 프로그램을 사용하게 된다. 이 때에도 시멘틱 태그를 사용하는 것이 스크린 리더의 활용에도 긍정적인 영향을 주기 때문에 </p>\n<p>본인이 웹 개발자라면 다양한 사용자 층에게 얼마나<code>포용적</code> 인 웹을 개발하였는지 보여주는 지표가 될 수 있다고 생각한다.</p>\n<h2 id=\"코드예시\">코드예시</h2>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/213a0f11-af28-4faf-be70-c9d4337a4563/image.png\" alt=\"\"></p>\n<hr>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/3448e49f-a02a-4550-8cf6-a29eea012acd/image.png\" alt=\"\"></p>\n<p>만약 첫 번째 사진 처럼 모든 태그들이 div로 되어있다면 직관적으로 코드의 구조를 알아보기가 매우 힘들다.</p>\n<p>반면에 두 번째 사진처럼 시맨틱 태그들을 사용하였을 경우 확실히 코드가 구조적으로 명확해보이고 유지보수 측면에서도 장점을 가질 수 있다.</p>\n<blockquote>\n<p>웹 접근성과 SEO는 당연히..</p>\n</blockquote>\n<h2 id=\"시맨틱-마크업과-seo의-구체적인-영향\">시맨틱 마크업과 SEO의 구체적인 영향</h2>\n<ol>\n<li>시맨틱 태그를 사용하면 각 요소의 의미가 명확해져, 검색 엔진은 해당 페이지의 구조와 내용을 당연히 쉽게 파악할 수 있게 된다 </li>\n</ol>\n<p>구체적으로는 검색엔진이 웹사이트를 <code>크롤링</code> 할 때, SEO 요소를 평가해서 페이지의 <code>랭킹</code>을 결정하고 그것이 검색결과 상단 , 하단에 표시 되는 기준 중 하나가 된다.</p>\n<h4 id=\"검색-엔진이-페이지를-평가하는-과정\">검색 엔진이 페이지를 평가하는 과정:</h4>\n<ol>\n<li><p>크롤링 : 웹 페이지를 자동으로 탐색하고 분석하는 단계 이 과정에서 페이지의 컨텐츠 태그, 링크 구조 등을 수집함</p>\n</li>\n<li><p>색인 : 크롤링한 데이터를 바탕으로 각 페이지의 정보를 색인에 저장한다. 이때 페이지의 주제와 관련된 키워드, 메타 데이터, 콘텐츠 풍질 등을 바탕으로 페이지를 분류</p>\n</li>\n</ol>\n<blockquote>\n<p>색인 : 검색엔진의 데이터베이스</p>\n</blockquote>\n<ol start=\"3\">\n<li>랭킹 : 사용자가 특정 키워드로 검색했을 때, 검색엔진은 색인된 페이지들을 랭킹 알고리즘을 통해 순서를 정함 이 가정에서 <code>SEO</code> 요소들이 중요한 역할을 함 </li>\n</ol>\n<p>즉, 색인된 데이터 베이스에서 입력한 검색 쿼리와 가장 관련서이 높은 페이지를 찾아내서 보여주는 것</p>\n<pre><code class=\"language-css\">검색 엔진이 SEO 평가 시 고려하는 요소\n시맨틱 마크업, 메타 태그, 모바일 친화성, 키워드 최적화 ... 등등 \n</code></pre>\n<p>예를 들면 <code>&lt;article&gt;</code> 태그는 독립적인 콘텐츠 블록임을 나타내고, <code>&lt;h1&gt;</code> 은 주요 제목이라는 정보를 전달한다. 검색 엔진은 이 정보들을 기반으로 페이지의 주제와 중요성을 파악해 순위를 매긴다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/855b089b-77b8-414f-aa0b-ba332c8d3a4e/image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>브라우저 개발자 도구에서 구조 가시성 증가 : 시맨틱 마크업을 사용하면 브라우저의 개발자 도구에서 HTML 요소의 의미와 구조를 쉽게 파악할 수 있음 즉, 디버깅과 유지보수를 간소화 할 수 있다는 것.</li>\n</ol>\n",
    "pubDate": "Thu, 26 Sep 2024 06:57:21 GMT",
    "thumbnail": null
  },
  {
    "title": "[Js] 가비지 컬렉션",
    "link": "https://velog.io/@gawgjiug/%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98",
    "description": "<h1 id=\"가비지-컬렉션\">가비지 컬렉션</h1>\n<p>자바스크립트에서 가비지 컬렉션은 사용하지 않는 메모리를 자동으로 회수하여 메모리 누수를 방지하는 기능을 말한다.</p>\n<p>자바스크립트는 개발자가 명시적으로 메모리를 할당하거나 해제하지 않는다. 필요하지 않게 된 객체를 자동으로 정리하는 방식으로 동작한다.</p>\n<p>이 과정을 가비지 컬렉터(Garbage Collector)가 수행한다.</p>\n<p>즉, 우리가 생성한 원시값, 객체, 함수 등 메모리를 차지 하는 모든 것들을 <code>쓸모가 없어지면</code> 찾아내 삭제하는 과정을 말한다.</p>\n<p>그러면 왜?? 굳이 삭제할까??</p>\n<blockquote>\n<p>가비지 컬렉터는 한정된 메모리 자원을 효율적으로 관리하기 위해 설계된 장치이다. 컴퓨터의 메모리는 유한하기 때문에 프로그램이 실행되면서 더 이상 필요하지 않은 데이터를 자동으로 정리하여 새로운 데이터의 공간을 확보하기 위함임</p>\n</blockquote>\n<p>그렇다면 그 <code>쓸모가 없어짐</code> 이라는 기준은 어떻게 생길까??</p>\n<h1 id=\"가비지-컬렉션-기준\">가비지 컬렉션 기준</h1>\n<p>자바스크립트는 도달 가능성(reachability) 이라는 개념을 사용해 메모리 관리를 수행한다. </p>\n<p>여기서 <code>도달 가능한</code> 값은 쉽게 말해 어떻게든 접근하거나 사용할 수 있는 값을 의미한다.\n그렇게 <code>도달 가능하다</code> 라고 판단 된 값은 메모리에서 삭제되지 않는다.</p>\n<ol>\n<li>아래의 소개되는 값들은 그 태생부터 <code>도달 가능</code> 하기 때문에 명백한 이유 없이는 삭제 되지 않는다.</li>\n</ol>\n<ul>\n<li>현재 함수의 지역 변수와 매개변수</li>\n</ul>\n<pre><code class=\"language-javascript\">function exampleFunction(param) {\n    // param은 매개변수\n    let localVar = &quot;지역 변수입니다.&quot;; // localVar는 지역 변수\n\n    console.log(param);  // 매개변수 참조 가능\n    console.log(localVar);  // 지역 변수 참조 가능\n}\n\nexampleFunction(&quot;매개변수 값&quot;);</code></pre>\n<blockquote>\n<p>즉 <strong>현재 실행 중인 함수의 지역 변수와 매개변수</strong> 는 함수가 실행되는 동안에는\n메모리에 남아 있고, 함수가 종료되면 더 이상 사용되지 않는 것으로 간주되어 가비지 컬렉터가 이를 처리할 수 있다. 그러나 함수가 실행 중인 동안에는 이 값들은 메모리에서 &quot;도달 가능&quot; 한 상태로 유지되어 삭제되지 않는다.</p>\n</blockquote>\n<hr>\n<ul>\n<li>중첩 함수의 체인에 있는 함수에서 사용되는 변수와 매개변수</li>\n</ul>\n<pre><code class=\"language-javascript\">function outerFunction(outerParam) {\n    let outerVar = &quot;외부 함수 변수&quot;;\n\n    function innerFunction(innerParam) {\n        let innerVar = &quot;내부 함수 변수&quot;;\n\n        // 외부 함수의 변수와 매개변수에 접근 가능\n        console.log(outerVar);  // &quot;외부 함수 변수&quot;\n        console.log(outerParam);  // 외부 함수의 매개변수 값 출력\n        console.log(innerVar);  // &quot;내부 함수 변수&quot;\n        console.log(innerParam);  // 내부 함수의 매개변수 값 출력\n    }\n\n    return innerFunction;\n}\n\nconst myFunction = outerFunction(&quot;외부 매개변수 값&quot;);\nmyFunction(&quot;내부 매개변수 값&quot;);</code></pre>\n<blockquote>\n<p>중첩 함수의 체인에 있는 함수에서 사용되는 변수와 매개변수 라는 문징은 <strong>중첩 함수</strong> 구조에서 내부 함수가 외부 함수의 변수와 매개변수에 접근 가능하다는 것을 의미한다.</p>\n</blockquote>\n<blockquote>\n<p>자바스크립트에서 함수는 렉시컬 스코프 규칙을 따르기 때문에, 내부 함수는 자신을 포함하는 외부 함수의 변수나 매개변수를 기억하고 사용할 수 있다.</p>\n</blockquote>\n<ul>\n<li><p>전역 변수</p>\n</li>\n<li><p>기타 루트(root) 값</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>루트가 참조하는 값이나 체이닝으로 루트에서 참조할 수 있는 값은 도달 가능한 값이 된다.</li>\n</ol>\n<p>전역 변수에 객체가 저장되어 있다고 가정해보자. 이 객체의 프로퍼티가 또 다른 객체를 참조하고 있다면, 프로퍼티가 참조하는 객체는 <code>도달 가능한 값</code> 이 된다. </p>\n<h3 id=\"예제\">예제</h3>\n<pre><code class=\"language-javascript\">let user ={\n    name : &#39;John&quot;\n}</code></pre>\n<p>이 코드에서 전역 변수 &quot;user&quot;는 <code>{name : John}</code> 이라는 객체를 참조한다. 이러한 상태를 <code>도달 가능한 상태</code> 라고한다.</p>\n<pre><code class=\"language-javascript\">user = null;</code></pre>\n<p>이제 <code>user</code> 더 이상 객체를 참조하지 않게 되고 결과적으로는 <code>{name : John}</code> 객체는 도달할 수 없는 상태가 되면서 가비지 컬렉터가 이를 인식하고 메모리에서 삭제 시킨다.</p>\n<hr>\n<h3 id=\"참조-두개-예제\">참조 두개 예제</h3>\n<p>그렇다면 한 객체를 여러 변수에서 참조하는 경우를 보자</p>\n<pre><code class=\"language-javascript\">let user = {\n    name: &quot;John&quot;\n};\n\nlet admin = user;  // user를 admin으로 복사</code></pre>\n<p>이제 user와 admin 두 변수가 같은 객체를 참조하고 있다. <code>user</code> 를 <code>null</code>로 설정해도, <code>admin</code> 이 여전히 <code>{name : John}</code> 객체를 참조하므로, 객체는 <code>도달 가능한 상태</code> 로 인식된다.</p>\n<p>이런 경우에는 두 전역변수의 참조를 모두 삭제해야 <code>{name : John}</code> 객체를 <code>도달 불가능</code> 상태로 만들 수 있다.</p>\n<pre><code class=\"language-javascript\">user = null;  // user의 참조를 삭제\nadmin = null; // admin의 참조를 삭제</code></pre>\n<h3 id=\"연결된-객체\">연결된 객체</h3>\n<p>더 복잡한 구조에서 객체들이 서로를 참조하는 경우를 보자 예를 들어 두 객체가 서로를 참조하는 관계를 생각해보자.</p>\n<pre><code class=\"language-javascript\">function marry(man, woman) {\n    woman.husband = man;\n    man.wife = woman;\n    return {\n        father: man,\n        mother: woman\n    };\n}\n\nlet family = marry({\n    name: &quot;John&quot;\n}, {\n    name: &quot;Ann&quot;\n});\n</code></pre>\n<p>이 예제 코드에서 <code>family</code> 객체는 <code>man</code> 과 <code>woman</code> 객체를 참조하고 있다. 그리고 또 <code>man</code>은 <code>woman</code> 을 <code>woman</code> 은 <code>man</code> 을 참조한다. </p>\n<p>즉 현재 모든 객체는 <code>도달 가능한</code> 상태이다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/38060711-c411-4aa2-8443-21ba81def1ee/image.png\" alt=\"\"></p>\n<pre><code class=\"language-javascript\">delete family.father;\ndelete family.mother.husband;</code></pre>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/e0dd5fe1-ed23-4ae4-b0bd-d5e99eb21998/image.png\" alt=\"\"></p>\n<p>삭제한 두 개의 참조 중 하나만 지웠다면, 모든 객체는 여전히 <code>도달 가능한</code> 상태였겠지만, 참조 두개를 지우게 되면 John 으로 들어갈 수 있는 참조는 모두 사라져 John은 <code>도달 가능한</code> 상태에서 벗어나게 된다.</p>\n<p>왜냐하면 외부로 나가는 참조 <code>wife</code>는 <code>도달 가능성</code> 에 영향을 주지 못하기 때문이다. 모든 객체는 외부에서 자신에게 들어오는 참조만이 <code>도달 가능성</code> 에 영향을 준다.</p>\n<p>위 사진의 결과로 John은 이제 도달 가능한 상태가 아니기 때문에 메모리에서 제거된다.</p>\n<p><strong>가비지 컬렉션 후 메모리 구조</strong></p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/9f84a5c1-2b35-4b34-b6e7-399aee4691a0/image.png\" alt=\"\"></p>\n<blockquote>\n<p>루트 객체는 자바스크립트 엔진에서 기본적으로 접근할 수 있는 최상위 참조 가능한 객체를 말한다 브라우저 환경에서는 <code>window</code> Node.js 환경에서는 <code>global</code> 객체를 말한다.</p>\n</blockquote>\n<blockquote>\n<p>전역 변수는 <strong>스크립트 전체에서 접근할 수 있는 변수</strong> 를 말한다. 즉, 전역 스코프에서 선언된 변수로 어디서든지 접근할 수 있는 것을 말한다.</p>\n</blockquote>\n<h3 id=\"도달할-수-없는-섬\">도달할 수 없는 섬</h3>\n<p>위 사진들 처럼 객체들은 연결되어 마치 하나의 독립 된 섬 같은 구조를 만든다. 그리고 이 섬에 도달할 방법이 없는 경우, <code>들어오는 참조가 없는 경우</code> 섬을 구성하는 객체 전부가 메모리에서 삭제되는 것이다.</p>\n<p>위 객체에서 <code>루트 객체</code> <code>family</code> 객체이다 정확하게 얘기하면 <strong>루트 객체의 속성에 해당하는 전역 변수로 선언된 것</strong> 즉, <code>family</code>는 <strong>전역 변수</strong>로 선언되어 있기 때문에 <code>window</code> 객체의 속성으로 간주된다.</p>\n<pre><code class=\"language-javascript\">family = null;</code></pre>\n<p>이렇게 루트 객체인 <code>family</code> 가 아무것도 참조하지 않도록 하였다. </p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/3ba6e34a-769e-4085-b07c-d7051a99f52f/image.png\" alt=\"\"></p>\n<p>그렇다면 메모리 구조는 다음과 같을 것이다.</p>\n<p>이 사진을 보면 가비지 컬렉션에서 <code>도달할 수 없는 섬</code> 예제는 <code>도달 가능성</code> 이라는 개념이 얼마나 중요한지 보여준다.</p>\n<p>John 과 Ann은 여전히 서로를 참조하고 있고, 두 객체 모두 외부에서 들어오는 참조를 갖고 있지만.</p>\n<p>앞서 말했 던 가비지 컬렉션의 기준인 <code>기타 루트(root) 값</code> 과 <code>루트가 참조하는 값이나 체이닝으로 루트에서 참조할 수 있는 값</code> 이라는 기준에 미치지 못하기 때문에 섬(객체) 전체가 도달할 수 없는 사태가 되고, 섬을 구성하는 객체 전부가 메모리에서 제거 되는 것이다.</p>\n<hr>\n<h2 id=\"요약\">요약</h2>\n<ul>\n<li><p><code>도달 가능한 객체</code> 는 메모리에서 삭제되지 않으며, 프로그램이 실행되는 동안 참조가 유지된다.</p>\n</li>\n<li><p><code>참조 삭제</code> 는 객체가 더 이상 도달할 수 없는 상태가 되도록 만든다.</p>\n</li>\n<li><p><code>객체 간의 참조</code> 는 복잡한 구조를 만들 수 있고, 이들 객체가 외부에서 참조되지 않으면 메모리에서 제거된다.</p>\n</li>\n</ul>\n<p><a href=\"https://ko.javascript.info/garbage-collection#ref-712\">출처: 모던 javascript 튜토리얼</a></p>\n",
    "pubDate": "Wed, 11 Sep 2024 06:22:36 GMT",
    "thumbnail": null
  },
  {
    "title": "JS What is Prototype?",
    "link": "https://velog.io/@gawgjiug/JS-What-is-Prototype",
    "description": "<h3 id=\"프로토타입-객체\">프로토타입 객체</h3>\n<p>Java C++ 과 같은 클래스 기반 객체지향 프로그래밍 언어와 달리 자바스크립트는 프로토타입 기반 객체지향 프로그래밍 언어이다. 따라서 자바스크립트의 동작 원리를 이해하기 위해서는 프로토타입의 개념을 잘 이해하고 있어야 한다.</p>\n<p>클래스 기반 객체지향 프로그래밍 언어는 객체 생성 이전에 클래스를 정의하고 이를 통해 객체를 생성한다.</p>\n<p>하지만 프로토타입 기반 객체지향 프로그래밍 언어는 클래스 없이(Class-less)도 객체를 생성할 수 있다.</p>\n<p><strong>그래서 프로토타입이란?</strong> 자바스크립트에서 프로토타입이란 객체 지향 프로그래밍에서 상속 기능을 구현하는 방식 중 하나이다. 쉽게 말해, 객체의 부모 역할을 하는 다른 객체를 가리키는 링크라고 생각할 수 있다.</p>\n<p>이 프로토타입을 통해 객체들은 다른 객체로부터 속성이나 메서드를 상속받아 사용할 수 있다.</p>\n<p>객체를 생성할 때 자바스크립트는 해당 객체의 프로토타입을 자동으로 설정한다.</p>\n<pre><code class=\"language-javascript\">function parents() {\n  this.a = &#39;A&#39;;\n  this.b = &#39;B&#39;;\n}\n\nconsole.log(parents.prototype);\nconsole.log(parents);</code></pre>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/8f7c6812-67c9-4212-9a8d-03db260e703e/image.png\" alt=\"\"></p>\n<p>위 사진을 보면 코드상에서 <code>parents</code> 객체에 prototype 이라는 속성을 선언한 적도 없는데 자동으로 prototype 이라는 객체를 가지고 있는 것을 볼 수 있다.</p>\n<p>이를 통해 자바스크립트의 모든 객체는 자신의 부모 역할을 하는 담당 객체인 <code>Prototype</code> 객체와 연결되어있고, </p>\n<p>객체를 선언함과 동시에 <code>Parents.prototype</code> 이라는 빈 Object 가 어딘가에 존재하고, Parents 함수로부터 생성 된 모든 자식 객체들은 언제든지 어딘가에 존재하는 <code>Parents.prototype</code> 에 들어있는 값들 모두 가져다 사용할 수 있다.</p>\n<p>예를 들어, 자바스크립트의 모든 배열은 Array.prototype 이라는 기본 프로토타입을 가지며, 이 프로토타입에는 배열 객체가 사용할 수 있는 다양한 메서드 <code>sort, push, pop</code> 가 정의되어 있다.</p>\n<pre><code class=\"language-javascript\">const arr = new Array(4, 2, 1, 10);\n//Array 객체의 자식인 arr 생성한 것과 마찬가지\n\narr.sort(); \n//arr.sort 메서드를 정의한적도 없는데 사용할 수 있는 이유?\n//부모 객체인 Array의 유전자인 prototype 객체에 정의되어 있기 때문에 자식인 arr도 사용할 수 있는 것.\n</code></pre>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/d64ff1cc-bb5b-4b41-b832-ad21d71888e0/image.png\" alt=\"\"></p>\n<h3 id=\"프로토타입-체인\">프로토타입 체인</h3>\n<p>프로토타입 체인이란 자바스크립트에서 객체가 속성이나 메서드를 찾을 때 사용하는 검색 메커니즘이다. 객체에 해당 속성이나 메서드가 없으면 자바스크립트는 자동으로 프로토타입 체인을 따라가며, 부모 객체의 프로토타입을 검색한다. 이 체인을 따라 올라가면서 속성이나 메서드를 찾게되면 그 값을 반환하고, 최종적으로 찾지 못하면 <code>undefined</code> 를 반환한다.</p>\n<pre><code class=\"language-javascript\">function parents() {\n  this.a = &#39;A&#39;;\n  this.b = &#39;B&#39;;\n}\n\nparents.prototype.name = &#39;gwag&#39;;\n\nconst child = new parents();\n\nconsole.log(child.name);</code></pre>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/915a456b-cc27-43d1-a9ee-0209362dd980/image.png\" alt=\"\"></p>\n<p>위 사진을 보면 코드상으로 child 객체에 사용자는 name 이라는 속성을 정의한 적이 없는데, name을 사용할 수 있는 것을 볼 수 있다.</p>\n<p>이 경우가 프로토타입 체인과 연관되어있는 것인데. JS는 내부적으로 해당 코드를 우선적으로 child 객체가 name이라는 데이터를 가지고 있는지 확인하고, 없다면 childe의 부모의 <code>유전자(prototype)</code> 을 검색하고 없다면 계속해서 부모의 부모를 찾는 방식으로 데이터를 검색하게 된다.</p>\n<p>이런식으로 Object의 속성이나 메서드를 찾을 때 사용하는 <code>메커니즘</code> 자체를 우리는 <code>Prototype Chain</code> 이라고 한다.</p>\n<p>이러한 개념을 이해하면 이어질 <code>프로토타입을 이용한 상속</code> 에 관련 된 개념도 쉽게 이해할 수 있다.</p>\n<h3 id=\"그렇다면-이러한-메커니즘을-가능하게-해주는-것은-무엇일까\">그렇다면 이러한 메커니즘을 가능하게 해주는 것은 무엇일까?</h3>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/11d6266f-e793-4375-bbd9-bc6de5051668/image.png\" alt=\"\"></p>\n<p>위 사진을 보게되면 우리가 함수를 정의하면, 함수만 생성되는 것이 아니라 자동으로 Prototype Object도 같이 생성이 된다고 앞서서 얘기했었는데, </p>\n<p>이렇게 생성 된 함수는 prototype 이라는 속성을 통해 Prototype Object 에 접근할 수 있게 된다. </p>\n<p>그리고 이러한 Prototype Object 는 앞서 말한 <code>프로토타입 체인</code> 메커니즘을 가능하게 만드는 <code>__proto__</code> 라는 속성을 기본으로 가지게 된다.</p>\n<p>여기서 <code>__proto__</code>  은 Prototype Link 라고도 불리는데, <code>__proto__</code>  속성은 모든 객체가 빠짐없이 가지고 있는 속성을 얘기하고, <code>__proto__</code>  는 객체가 생성될 때 조상이었던 함수의 Prototype Object를 가리키게 된다.</p>\n<p>그래서 우리가 위의 예제들 처럼 자식 객체들이 부모객체가 가지고 있는 유전자 즉, Prototype Object 안에 정의되어있는 모든 속성과 함수들을 사용할 수 있는 것이다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/e0fdef04-bccd-4814-903d-b031f30a05dd/image.png\" alt=\"\"></p>\n<pre><code class=\"language-javascript\">function parents() {\n  this.a = &#39;A&#39;;\n  this.b = &#39;B&#39;;\n}\n\nconst child = new parents();\n\nconsole.log(child.__proto__);</code></pre>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/8ef8044a-2157-4c1d-b473-dfa42b1bdc29/image.png\" alt=\"\"></p>\n<p>그리고 추가적으로 <code>__proto__</code> 와 <code>prototype</code> 의 차이점에 대해 헷갈려하는 분들이 많은데, <code>prototype</code>은 생성자 함수의 속성이고 <code>__proto__</code> 는 객체 인스턴스의 속성이라는 점을 알고 있으면 프로토타입을 이해하는 데에 있어서 혼동을 겪지 않을 것이다.</p>\n<pre><code class=\"language-javascript\">\nfunction Person() {\n  this.name = &#39;John&#39;;\n}\n\nPerson.prototype.greet = function() {\n  console.log(&#39;Hello, &#39; + this.name);\n};\n\nconst person1 = new Person();\n\nconsole.log(person1.__proto__ === Person.prototype); // true</code></pre>\n<p>위 예제에서 person1 객체는 Person 함수로 생성된 것이며, person1.<strong>proto</strong>는 Person.prototype을 가리킵니다. 따라서 person1은 Person.prototype에 정의된 greet 메서드를 사용할 수 있습니다</p>\n<h3 id=\"요약\">요약</h3>\n<ul>\n<li>함수는 Prototype Object를 자동으로 생성합니다.</li>\n<li>이 Prototype Object는 <strong>prototype</strong>이라는 속성으로 함수와 연결되어 있습니다.</li>\n<li>객체 인스턴스는 생성자 함수의 <strong>prototype</strong>을 <strong>proto</strong> 속성을 통해 참조합니다.</li>\n</ul>\n<p>이 메커니즘을 통해 자바스크립트의 객체는 상속과 메서드 공유를 가능하게 합니다. prototype은 생성자 함수와 연결된 속성이고, <strong>proto</strong>는 생성된 객체가 부모 객체를 참조하는 링크 역할을 한다</p>\n",
    "pubDate": "Tue, 03 Sep 2024 05:39:02 GMT",
    "thumbnail": null
  }
]