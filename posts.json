[
  {
    "title": "useRef",
    "link": "https://velog.io/@gawgjiug/useRef-btnpnh62",
    "description": "<h2 id=\"useref\">useRef</h2>\n<p>렌더링과는 별개로 변수를 사용하거나 DOM 요소에 접근할 때 사용되는 기능이다.</p>\n<p>useState 의 경우 값을 바꿀 때 화면도 렌더링 되지만, useRef는 렌더링과 관계없이 변경 가능한 값들을 가질 수 있다.</p>\n<p>=&gt; Ref는 State와 비슷하게 어떠한 값을 저장해두는 저장 공간으로 활용된다.</p>\n<h3 id=\"그래서-useref는-어떤-상황에서-활용하면-좋을까\">그래서 useRef는 어떤 상황에서 활용하면 좋을까??</h3>\n<ol>\n<li>DOM 요소에 접근할 때</li>\n</ol>\n<p>useRef는 HTML 요소에 직접 접근할 때 유용하게 사용될 수 있다. 예를 들자면 특정 input 에 포커스를 설정하거나, 스크롤 동작을 제어할 때 사용된다.</p>\n<pre><code class=\"language-javascript\">import React, { useRef } from &quot;react&quot;;\n\nfunction InputFocus() {\n  const inputRef = useRef(null);\n\n  const focusInput = () =&gt; {\n    inputRef.current.focus();\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input ref={inputRef} type=&quot;text&quot; /&gt;\n      &lt;button onClick={focusInput}&gt;Focus Input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<p>이 코드는 useRef를 사용해서 input 요소의 참조를 생성하고, 버튼 클릭 시 해당 input 요소에 포커스를 맞추는 기능을 한다. 그래서 왜 <code>useRef</code> 가 DOM 요소에 직접적인 조작이 필요한 경우에 유용하게 사용될 수 있느냐??</p>\n<p>왜냐하면 useRef를 통해 생성된 <code>참조 객체</code> 를 통해 DOM 요소에 직접 접근할 수 있기 때문이다.</p>\n<p>참조객체는 무엇이냐? </p>\n<p><code>참조 객체</code> 는 React 에서 useRef 훅을 사용해서 생성된 객체를 말한다. 이 객체는 알다싶이 렌더링 사이클과 독립적으로 유지되는 변경 가능한 값을 저장할 때 사용된다.</p>\n<h3 id=\"참조-객체의-주요-특징\">참조 객체의 주요 특징</h3>\n<ol>\n<li><p><code>current</code> 프로퍼티를 통해 값에 접근</p>\n<ul>\n<li><code>useRef</code> 로 생성된 객체는 {current : ...} 형태를 가지고 있기에 <code>current</code> 프로퍼티에 저장된 값에 접근 하거나 변경할 수 있다.</li>\n</ul>\n</li>\n<li><p>React의 렌더링 사이클과 독립적</p>\n</li>\n</ol>\n<hr>\n<p>useRef는 이러한 특징들 때문에 DOM 조작에 유용한 것이다 특정 DOM 요소를 직접 조작할 때 렌더링 흐름과 충돌하지 않고도 필요한 조작을 수행할 수 있게끔, 안전하고 간단하게 DOM 에 접근할 수 있도록 해준다.</p>\n<h3 id=\"ref-활용의-모범사례\">Ref 활용의 모범사례</h3>\n<ul>\n<li><p>필요한 경우에만 사용 : Ref 는 직접적인 DOM 접근이 필요할 때 사용해야 한다. 포커스 설정, 텍스트 선택 , 미디어 재생제어와 같이 <code>선언적인</code> 방식으로 해결할 수 없는 작업에 사용한다.</p>\n</li>\n<li><p>컴포넌트 내부에서만 사용 : Ref는 컴포넌트 내부에서만 사용하고 외부로 노출시키지 않는다. 컴포넌트의 내부 구현을 외부로 유출시키면 컴포넌트의 재사용성과 유지보수성이 떨어지기 때문</p>\n</li>\n<li><p>상태 업데이트에는 사용하지 않기 : Ref를 사용해 상태 업데이트와 같은 리액트의 데이터 흐름을 우회하는 것은 피해야한다.</p>\n</li>\n</ul>\n<h3 id=\"ref-활용-주의-사항\">Ref 활용 주의 사항</h3>\n<ul>\n<li><p>Ref 남용 방지 : 모든 상호 작용이나 DOM 조작에 Ref 를 사용하는 것은 <code>지양</code> 해야 한다. 리액트의 선언적 UI 구성 방식과 잘 어우러지지 않으며 애플리케이션의 복잡성을 높일 수 있음.</p>\n</li>\n<li><p>함수형 컴포넌트에서의 useRef 우선 사용 : 클래스 컴포넌트에서는 createRef 를, 함수형 컴포넌트에서는 useRef를 사용하는 것이 권장됩니다. 함수형 컴포넌트와 훅을 사용하는 현대 리액트 개발 패러다임에 더 잘 부합합니다.</p>\n</li>\n<li><p>동적 Ref 사용 시 주의 : 여러 요소에 대한 Ref를 동적으로 생성하고 관리해야 할 때 문자열 대신 함수를 사용하거나 Map 객체를 활용하는 등의 방법으로 관리하는 것이 좋다.</p>\n</li>\n</ul>\n<h2 id=\"다시-한번-더-왜\">다시 한번 더 왜?</h2>\n<blockquote>\n<p>필요한 경우에만 사용 : Ref 는 직접적인 DOM 접근이 필요할 때 사용해야 한다. 포커스 설정, 텍스트 선택 , 미디어 재생제어와 같이 <code>선언적인</code> 방식으로 해결할 수 없는 작업에 사용한다.</p>\n</blockquote>\n<p>useRef를 사용하면 DOM에 직접 접근하므로 React의 선언적 흐름을 우회하는 것. 여기서 <code>선언적</code> 이란?? 리액트가 상태와 props를 통해 UI를 자동으로 관리하는 것을 말함</p>\n<blockquote>\n<p>컴포넌트 내부에서만 사용</p>\n</blockquote>\n<p>Ref는 컴포넌트의 구현 <code>세부 사항</code> 을 드러낸다. 이를 외부로 노출하면 컴포넌트가 다른 컴포넌트와 강하게 결합되어 재사용성이 떨어진다는 것</p>\n<pre><code class=\"language-javascript\">function MyComponent() {\n  const inputRef = useRef();\n\n  // 내부에서 Ref를 사용\n  const focusInput = () =&gt; inputRef.current.focus();\n\n  return &lt;input ref={inputRef} /&gt;;\n}\n</code></pre>\n<p>예를 들면 위 코드에서는 Ref가 컴포넌트 내부에만 존재하므로 외부에서 해당 <code>input</code> 을 제어할 수 없게끔 설계 되어있다. 만약 Ref 를 외부로 노출한다면 외부 컴포넌트(코드) 가 해당 Ref를 남용할 가능성이 있음</p>\n<blockquote>\n<p>상태 업데이트에는 사용하지 않기</p>\n</blockquote>\n<p>Ref 를 통해 상태를 관리하려 하면 React의 <code>렌더링 프로세스</code> 와 동기화 되지 않는 데이터가 발생할 수 있음 즉, 상태 변화가 React의 렌더링 트리거를 동반하지 않으므로 UI가 예상과 다르게 작동할 수 있음.</p>\n<blockquote>\n<p>왜 문자열 Ref는 사용하지 않아야 할까?</p>\n</blockquote>\n<p>React v16 이후, 문자열 Ref는 더 이상 권장되지 않고있다. 이유는 문자열 Ref가 React의 향후 릴리즈에서 제거될 가능성이 있고, 문자열 Ref 는 컴포넌트 사이에서 값을 동적으로 할당하거나 변경하기 어렵기 때문</p>\n",
    "pubDate": "Wed, 11 Dec 2024 03:51:28 GMT",
    "thumbnail": null
  },
  {
    "title": "this?",
    "link": "https://velog.io/@gawgjiug/this",
    "description": "<h3 id=\"this란\">this란??</h3>\n<p>this는 기본적으로 window를 말한다 일반 함수 내에서 혼자 this를 선언하면 그 this는 <code>window</code> 객체를 가르킨다.</p>\n<p>일반 함수가 아니라면?? </p>\n<p>객체 메서드 a 안의 this는 obj를 가리킨다. 왜?? 객체의 메서드를 호출할 때 this를 내부적으로 바꿔주기 때문이다</p>\n<pre><code class=\"language-javascript\">let obj = {\n  a: function () {\n    console.log(this);\n  },\n};\n\nobj.a(); // obj\n</code></pre>\n<p>여기서 바꿔준다는 표현은 호출 방식에 따라서 달라진다는 것을 의미한다. </p>\n<ol>\n<li>obj 객체 내부에서 a 메서드를 찾음. </li>\n<li>메서드가 호출될 때 this를 obj로 바인딩 즉, 자바스크립트가 <code>a</code> 를 실행하는 동안 해당 함수의 실행 컨텍스트에서는 <code>this</code> 는 <code>obj</code> 를 가리킴</li>\n</ol>\n<hr>\n<pre><code class=\"language-javascript\">var a2 = obj.a;\na2(); // window</code></pre>\n<p>반면에 이렇게 코드를 작성하면 a2는 obj.a 를 꺼내온 것이기 때문에 더 이상 obj의 메서드가 아니라고 인식을 한다.</p>\n<p>즉 호출할 때, 호출하는 함수가 객체의 메서드인지, 그냥 함수인지가 중요하다. 자바와는 다르게 JS에서 <code>this</code> 가 가리키는 값은 함수가 호출되는 <code>방식</code> 에 따라 동적으로 결정되는 것</p>\n<p>obj.a() 를 호출할 때, this는 a 메서드를 호출한 객체은 obj를 가리킨다.</p>\n<p>즉, 점(.) 연산자나 대괄호 [] 를 통해 호출하면 해당 객체가 <code>this</code> 로 설정됩니다. 여기서 자바스크립트는 내부적으로 호출 객체를 <code>this</code> 로 바인딩한다</p>\n<pre><code class=\"language-javascript\">let a2 = obj.a; // 메서드를 변수로 복사\na2(); // window (브라우저 환경), undefined (strict 모드)</code></pre>\n<p>a2는 obj.a 의 참조 주소만 복사한 것이다. a2는 독립적인 함수로 취급 되기 때문에 이때 a2() 를 호출하면 메서드 호출이 아니라 일반 함수 호출로 간주된다.</p>\n<h3 id=\"왜-더-이상-obj를-가리키지-않을까\">왜 더 이상 obj를 가리키지 않을까??</h3>\n<p>자바스크립트는 <code>this</code> 를 메서드 정의 시점이 아니라 <strong>호출 시점</strong> 에 결정한다. a2()는 독립적인 함수로 호출되었으므로, this와 obj 와는 무관해짐</p>\n<p>가장 결정적인 것은 <code>호출 방식</code> obj.a() 처럼 객체를 통해 호출하면 this는 해당 객체를 가리킨다. a2() 처럼 독립적인 함수 호출이면, <code>this</code> 는 기본적으로 전역 객체를 가리킴</p>\n<p>여기서 한 가지 예외가 있는데 <code>화살표 함수</code> 이다. 화살표 함수는 <code>this</code> 를 정의된 위치의 상위 스코프에서 상속한다. 호출 방식에 영향을 받지 않으므로 다르게 동작할 수 있음</p>\n<h3 id=\"자바와의-차이\">자바와의 차이</h3>\n<p>Java에서는 this는 인스턴스 자신(self) 을 가리키는 참조변수인데, 자바스크립트 같은 경우 this에 바인딩되는 객체는 한가지로 고정되는 것이 아니라 달라질 수 있다는 점</p>\n<h3 id=\"함수-호출-방식과-this-바인딩\">함수 호출 방식과 this 바인딩</h3>\n<p>기본적으로 this는 전역객체(Global object)에 바인딩된다.</p>\n<p>일반 전역 함수는 물론이고 내부함수의 경우도 this는 외부함수가 아닌 전역 객체에 바인딩된다. 자바스크립트에서는 함수 내부의 또 다른 내부함수는 this를 자동으로 부모함수의 this로 상속받지 않는다.</p>\n<pre><code class=\"language-javascript\">function foo() {\n  console.log(&quot;foo&#39;s this: &quot;,  this);  // window\n  function bar() {\n    console.log(&quot;bar&#39;s this: &quot;, this); // window\n  }\n  bar();\n}\nfoo();</code></pre>\n<p>마찬가지로 콜백 함수의 경우에도 this는 전역객체에 바인딩된다. 콜백 함수는 별도의 컨텍스트에서 실행되기 때문이다</p>\n<p>내부함수의 this가 전역객체를 참조하는 것을 회피하는 방법은 아래와 같은데, </p>\n<p>화살표 함수를 사용하면 된다. 화살표 함수는 <code>this</code> 를 상위 스코프에서 상속받기 때문</p>\n<pre><code class=\"language-javascript\">let obj = {\n  value: 10,\n  method: function () {\n    console.log(this.value); // 10\n\n    const inner = () =&gt; {\n      console.log(this.value); // 10\n    };\n\n    inner();\n  },\n};\n\nobj.method();</code></pre>\n<p>화살표 함수에서는 <code>this</code> 가 동적으로 설정되지 않고 정의된 위치의 <code>this</code> 를 유지한다.</p>\n<p>이외에도 bind,call,apply 등등 으로 회피할 수 있지만 현재는 화살표 함수로 대체하고 있다. 가장 현대적인 방법</p>\n<h3 id=\"결론\">결론</h3>\n<p><code>this</code> 는 자바스크립트에서 함수가 호출되는 방식에 따라 동적으로 바인딩되는 특성을 가진다. 이를 이해하는 것은 객체 지향적인 코드 작성뿐만 아니라 콜백 함수, 내부 함수, 화살표 함수 등 다양한 상황에서 의도한 대로 코드를 동작하게 만드는 데 중요하다.</p>\n<ol>\n<li>기본적으로 전역 객체를 가리킴</li>\n</ol>\n<p>전역 함수에서의 this는 브라우저 환경에서는 window, Node.js 환경에서는 global을 참조한다.</p>\n<ol start=\"2\">\n<li>객체 메서드 호출 시 바인딩</li>\n</ol>\n<p>obj.a()처럼 객체를 통해 호출하면 this는 해당 객체를 참조한다.\n하지만, 메서드를 변수에 할당하거나, 함수로 독립적으로 호출하면 this는 다시 전역 객체를 가리킨다.</p>\n<ol start=\"3\">\n<li>내부 함수에서의 this 문제</li>\n</ol>\n<p>일반 함수 내의 내부 함수에서 this는 상위 함수가 아닌 전역 객체를 가리킨다.\n이를 해결하기 위해 bind, call, apply와 같은 명시적인 바인딩 방법을 사용하거나, 화살표 함수를 활용하여 상위 스코프의 this를 상속받을 수 있다.</p>\n<ol start=\"4\">\n<li>화살표 함수의 특별한 this 처리</li>\n</ol>\n<p>화살표 함수는 호출 방식에 관계없이 상위 스코프의 this를 유지한다. 따라서 객체 메서드나 콜백 함수에서 의도치 않은 this 바인딩 문제를 해결하는 가장 현대적인 방법이다.</p>\n<ol start=\"5\">\n<li>동적 바인딩과 자바와의 차이</li>\n</ol>\n<p>자바의 this는 객체 인스턴스를 고정적으로 가리키는 반면, 자바스크립트의 this는 함수 호출 방식에 따라 달라지므로 더 유연하지만, 예측하기 어렵다는 단점이 있다.</p>\n",
    "pubDate": "Wed, 04 Dec 2024 08:18:45 GMT",
    "thumbnail": null
  },
  {
    "title": "MSW 에 대해서 아시나요?",
    "link": "https://velog.io/@gawgjiug/MSW-%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%84%EC%8B%9C%EB%82%98%EC%9A%94",
    "description": "<p>최근에 데이터를 실제로 fetching 하기 전 <code>퍼블리싱 혹은 Mocking</code> 단계에서는 컴포넌트를 어떻게 설계해야할까? 에 대한 고민을 하다가 <code>MSW</code> 라이브러리에 대해서 알게되어서 글을 작성합니다.</p>\n<p>우선 가장 이상적인 프론트와 백엔드의 작업방식은 API 명세가 모두 나온 이후에 FE 개발자가 작업에 들어가는 것입니다. 하지만 현실적으로 그러기 어려운 상황에서는 MSW(Mock Service Worker)를 활용한 API<code>모킹</code> 전략을 이용할 수 있습니다.</p>\n<p>앞에서 말한대로, <code>API 모킹</code> 은 개발 초기 단계에서 백엔드 서비스가 준비되지 않았을 때 혹은 더 나아가서 통합테스트를 수행할 때 매우 중요한 역할을 합니다.</p>\n<p>왜냐하면 API 모킹을 통해 실제 백엔드 서비스 없이도 프론트엔드 애플리케이션의 동작을 시뮬레이션 할 수 있기 때문입니다.</p>\n<hr>\n<h3 id=\"msw-소개\">MSW 소개</h3>\n<p>리액트 환경에서의 MSW는 브라우저와 <code>Node.js</code> 환경에서 네트워크 요청을 <code>가로채고</code> 모킹할 수 있는 라이브러리입니다.</p>\n<p>정확히는 MSW를 사용하여 실제 네트워크 요청을 가로채고, 개발자가 정의한 응답으로 대체할 수 있는 것인데요 이를 이용하면 실제 백엔드 서버 없이도 API 요청과 응답을 시뮬레이션 할 수 있겠죠?</p>\n<p>그리고 <code>요청 지연</code> 이나 상태 코드 등을 설정할 수 있어서 실제 네트워크 요청과 유사한 환경에서 시뮬레이션을 할 수 있습니다.</p>\n<hr>\n<h3 id=\"msw-작동-방식\">MSW 작동 방식</h3>\n<p>MSW가 브라우저에서 동작하는 방식은 다음과 같습니다. 우선 MSW 라이브러리를 설치하면 브라우저에 Servie Worker 를 등록합니다. 이후에 브라우저에서 이루어지는 실제 네트워크 <code>요청</code> 들을 (fetch 로 보낸 네트워크 요청 등등) Service Worker 가 가로채게 됩니다.</p>\n<p>그리고 이 가로챈 요청을 복사해서 실제 서버가 아니라 클라이언트 사이드에 있는 MSW 라이브러리로 보낸 후에 등록된 핸들러를 통해서 모의 응답을 제공받습니다. 그리고 제공받은 모의응답을 브라우저에게 그대로 전달하게 되는 것입니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/c30b6a57-354f-4bf1-8358-cd7634b62208/image.png\" alt=\"\"></p>\n<blockquote>\n<p>그래서 Service Worker가 뭔데?</p>\n</blockquote>\n<p>서비스 워커는 브라우저가 백그라운드에서 실행하는 스크립트를 말하고, 웹 서비스와 브라우저 및 네트워크 사이에서 <code>프록시 서버</code> 의 역할을 한다.</p>\n<hr>\n<h3 id=\"사용-방법\">사용 방법</h3>\n<ol>\n<li>설치</li>\n</ol>\n<pre><code>npm install msw --save-dev</code></pre><ol start=\"2\">\n<li>핸들러 정의</li>\n</ol>\n<pre><code class=\"language-javascript\">// src/mocks/handlers.js\nimport { rest } from &#39;msw&#39;; //rest 객체 가져오기 API ㅇ청을 모킹하기 위한 헬퍼 제공\n\nexport const handlers = [\n  rest.get(&#39;/api/user&#39;, (req, res, ctx) =&gt; { //res 응답 , ctx 응답내용 설정\n    return res(\n      ctx.status(200),\n      ctx.json({ id: 1, name: &#39;John Doe&#39; })\n    );\n  }),\n];</code></pre>\n<ol start=\"3\">\n<li>Service Worker 설정</li>\n</ol>\n<pre><code class=\"language-javascript\">// src/mocks/browser.js\nimport { setupWorker } from &#39;msw&#39;;\nimport { handlers } from &#39;./handlers&#39;;\n\nexport const worker = setupWorker(...handlers); //인스턴스 생성 및 요청 핸들러 정의</code></pre>\n<ol start=\"4\">\n<li>Worker 실행 </li>\n</ol>\n<p>어플리케이션이 실행 될 때 워커를 실행하는 코드를 추가</p>\n<pre><code class=\"language-javascript\">// src/index.js\nimport React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport App from &#39;./App&#39;\n\nif (process.env.NODE_ENV === &#39;development&#39;) {\n  const { worker } = require(&#39;./mocks/browser&#39;)\n  worker.start()\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;))</code></pre>\n<ol start=\"5\">\n<li>적용 확인</li>\n</ol>\n<pre><code>[MSW] Mocking enabled.</code></pre><p>어플리케이션을 다시 시작하고, 브라우저 콘솔에서 아래와 같은 메세지가 뜨면 모킹이 활성화 된 것이다.</p>\n<p>그리고 이제 클라이언트에서 요청을 보내게 되면</p>\n<pre><code class=\"language-javascript\">fetch(&#39;/api/user&#39;)\n  .then((response) =&gt; response.json())\n  .then((data) =&gt; console.log(data)); // { id: 1, name: &quot;John Doe&quot; }</code></pre>\n<pre><code>{ id: 1, name: &quot;John Doe&quot; }</code></pre><p>이렇게 정상적으로 데이터를 받아볼 수 있다.</p>\n<h3 id=\"마무리\">마무리</h3>\n<p>현재 진행 중인 프로젝트에 MSW를 도입해 개발을 하니깐 굉장히 편리하다고 느꼈기 때문에 공유하고 싶었습니다. 정해진 기간에 백엔드와 프론트엔드가 동시에 개발을 시작하는데 API가 준비되지 않은 상황에서 프론트 개발을 빠르게 할 수 있다는 점이 너무 크게 다가왔었고, </p>\n<p>백엔드 의존도를 많이 줄이고 독립적으로 작업할 수 있어서 오히려 테스트 시간을 더 많이 확보한다거나 리팩토링 기간을 더 길게 잡는다던가 하는 일정 조율이 가능해서 추천드립니다.</p>\n<p>그리고 특히 직접 네트워크 <code>응답 상태</code> 를 조절하면서 내가 원하는 화면 (성공 화면, 로딩 화면, 에러 화면) 을 효율적으로 개발할수 있었고 <code>req</code> 에 에러코드를 전달해서 디버깅도 가능합니다.</p>\n<p><a href=\"https://mswjs.io/\">참고</a></p>\n",
    "pubDate": "Thu, 21 Nov 2024 06:47:41 GMT",
    "thumbnail": null
  },
  {
    "title": "React Query Optimistic Updates",
    "link": "https://velog.io/@gawgjiug/React-Query-Optimistic-Updates",
    "description": "<h3 id=\"낙관적-업데이트\">낙관적 업데이트</h3>\n<p>낙관적 업데이트의 개념은 다음과 같다.</p>\n<ul>\n<li><p>데이터가 <code>실제 서버</code> 에 반영되기 전에 미리 UI에 반영하여 사용자 경험을 향상시키는 기법</p>\n</li>\n<li><p>사용자가 서버 응답을 기다리지 않고도 즉각적인 피드백을 받을 수 있게 해준다.</p>\n</li>\n</ul>\n<p>낙관적 업데이트의 주요 단계는 이렇다.</p>\n<p>우선 업데이트를 수행하기 전에 현재 상태를 저장해야한다. 서버 요청이 실패했을 경우 원래 상태로 롤백하기 위함이다.</p>\n<h4 id=\"어떻게\">어떻게?</h4>\n<p>낙관적 상태 업데이트의 과정은 이렇다. </p>\n<p><code>queryClient.setQueryData</code> 메서드를 사용해서 로컬상태를 즉시 업데이트 한다. </p>\n<ul>\n<li>이 작업 전에 <code>queryClient.cancleQueries</code> 메서드로 해당 쿼리에 대한 모든 활성 쿼리를 취소해줄 수 있다.</li>\n</ul>\n<p>바로 이 작업이 사용자가 변경 사항을 즉시 확인할 수 있도록 하는 것</p>\n<hr>\n<p>그 다음 실제 데이터를 전송한다. 이때 <code>mutate</code> 혹은 <code>mutateAsync</code> 메서드를 사용하는 것</p>\n<p>서버 요청이 성공하면, 서버로부터 받은 최신 데이터를 다시 상태에 반영한다. 이 작업은 <code>onSettled</code> 콜백 함수에서 수행. </p>\n<hr>\n<h3 id=\"예제-코드\">예제 코드</h3>\n<p>코드로 낙관적 업데이트를 알아보면 이렇다</p>\n<pre><code class=\"language-javascript\">import { useMutation, useQueryClient } from &#39;react-query&#39;;\n\nfunction MyComponent() {\n    const queryClient = useQueryClient();\n\n    // Mutation을 설정합니다\n    const { mutate } = useMutation(updateData, {\n        // 1. 낙관적 업데이트: 기존 상태 백업, 즉시 UI에 반영\n        onMutate: async (newData) =&gt; {\n            await queryClient.cancelQueries(&#39;myData&#39;); // 활성 쿼리 취소\n\n            // (1) 기존 상태를 백업\n            const previousData = queryClient.getQueryData(&#39;myData&#39;); // 현재 상태를 백업\n\n            // (2) UI에 즉시 반영\n            queryClient.setQueryData(&#39;myData&#39;, (oldData) =&gt; {\n                return { ...oldData, ...newData }; // 새 데이터를 UI에 반영\n            });\n\n            // (3) 이전 상태 반환 (onError에서 롤백 시 사용)\n            return { previousData }; // 이후의 onError 등에서 복원할 수 있도록 반환\n        },\n\n        // 2. 서버 요청 실패 시 백업한 상태로 롤백\n        onError: (error, newData, context) =&gt; {\n            queryClient.setQueryData(&#39;myData&#39;, context.previousData); // 이전 상태로 복원\n        },\n\n        // 3. 서버 응답 시 최신 데이터로 상태 갱신\n        onSettled: () =&gt; {\n            queryClient.invalidateQueries(&#39;myData&#39;); // 데이터를 다시 가져와 최신 상태로 유지\n        },\n    });\n\n    return (\n        &lt;button onClick={() =&gt; mutate({ key: &#39;value&#39; })}&gt;\n            Update Data\n        &lt;/button&gt;\n    );\n}</code></pre>\n<p>onMutate 함수는 서버에 요청을 보내기 직전에 실행되며, 서버 요청이 실패했을 때는 UI 상태를 복원하는 동작을 수행한다.</p>\n<blockquote>\n<pre><code>       await queryClient.cancelQueries(&#39;myData&#39;); // 활성 쿼리 취소</code></pre></blockquote>\n<p>먼저 활성 쿼리를 취소해주는 작업은 <code>정확성</code> 을 보장하기 위해 존재한다.</p>\n<p>예를 들어 백엔드에서 데이터를 다시 가져오는 쿼리가 활성화 되어있다면, 서버 응답 시에 이전 데이터로 덮어 쓰는 문제가 발생할 수 있다</p>\n<p>더 자세하게는 사용자가 UI 에서 데이터를 업데이트하자마자 백엔드에서 이전 데이터를 불러오는 쿼리가 완료되면 업데이트된 UI가 갑자기 예전 상태로 돌아가 보일 수 있다.</p>\n<hr>\n<h3 id=\"활성-쿼리-취소\">활성 쿼리 취소</h3>\n<p>활성 쿼리 취소가 <code>왜?</code> 필요한지에 대해서 더 자세히 설명해보겠다. </p>\n<p>예를 들어 게시글 페이지에서 댓글 리스트가 표시되고, 각 댓글에는 좋아요 버튼이 존재한다고 가정해보자.</p>\n<p>사용자가 댓글에 좋아요를 누르면 해당 댓글의 좋아요 수가 UI에 즉시 반영되도록 낙관적 업데이트를 적용했다</p>\n<p>동시에 이 페이지에는 일정 주기로 백엔드에서 <code>최신 댓글 데이터를 가져오는 쿼리</code> <code>fetchComment</code> 가 활성화 되어있었는데,</p>\n<p>사용자가 좋아요 버튼을 클릭했을 때 낙관적 업데이트로 즉시 반영된 상태에서, 동시에 <code>fetchComment</code> 쿼리가 백엔드에서 이전의 댓글 리스트 데이터를 받아와 UI를 덮어 써버린다. </p>\n<p>위와 같은 현상을 방지하기 위해서 업데이트를 적용하기 전에 <code>cancleQueries</code> 를 호출해서 <code>fetchComment</code> 쿼리를 일시적으로 취소하는 것.</p>\n",
    "pubDate": "Mon, 11 Nov 2024 14:21:50 GMT",
    "thumbnail": null
  },
  {
    "title": "리액트 useParams 와 Query String",
    "link": "https://velog.io/@gawgjiug/%EB%A6%AC%EC%95%A1%ED%8A%B8-useParams-%EC%99%80-Query-String",
    "description": "<h3 id=\"useparams-란\">useParams() 란??</h3>\n<hr>\n<p>리액트에서 라우터 사용 시에 useParams 훅을 사용해서 url 의 <code>동적인</code> 파라미터 정보를 가져올 수 있다. 여기서 말하는 동적인 파라미터란? <code>url</code> 구조에서 <code>...url/path/1</code> 에서 이 1이 파라미터가 되는 것이다.</p>\n<pre><code>{\n  path: &quot;/post/:postId&quot;,\n  element: &lt;PostDetail /&gt;,\n},</code></pre><pre><code>function UserProfile() {\n  const { postId } = useParams(); // 현재 URL에서 postId 값을 가져옴\n}</code></pre><p>리액트의 useParams 훅으로 게시글 ID에 따라 다른 URL로 이동하는 예제로 이해해보자.</p>\n<p>우선 라이브러리를 설치해주고,</p>\n<p>라우터를 설정해준다.</p>\n<pre><code class=\"language-javascript\">// App.js\nimport React from &#39;react&#39;;\nimport { BrowserRouter as Router, Route, Routes } from &#39;react-router-dom&#39;;\nimport PostList from &#39;./PostList&#39;;\nimport PostDetail from &#39;./PostDetail&#39;;\n\nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/&quot; element={&lt;PostList /&gt;} /&gt;\n        &lt;Route path=&quot;/post/:id&quot; element={&lt;PostDetail /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/Router&gt;\n  );\n}\n\nexport default App;</code></pre>\n<hr>\n<pre><code class=\"language-javascript\">// PostList.js\nimport React from &#39;react&#39;;\nimport { Link } from &#39;react-router-dom&#39;;\n\nfunction PostList() {\n  const posts = [\n    { id: 1, title: &#39;게시글 1&#39; },\n    { id: 2, title: &#39;게시글 2&#39; },\n    { id: 3, title: &#39;게시글 3&#39; },\n  ];\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;게시글 목록&lt;/h1&gt;\n      &lt;ul&gt;\n        {posts.map((post) =&gt; (\n          &lt;li key={post.id}&gt;\n            &lt;Link to={`/post/${post.id}`}&gt;{post.title}&lt;/Link&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default PostList;</code></pre>\n<hr>\n<pre><code class=\"language-javascript\">// PostDetail.js\nimport React from &#39;react&#39;;\nimport { useParams } from &#39;react-router-dom&#39;;\n\nfunction PostDetail() {\n  const { id } = useParams();\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;게시글 상세 페이지&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default PostDetail;</code></pre>\n<h3 id=\"쿼리-스트링\">쿼리 스트링</h3>\n<p>쿼리스트링은? URL 의 한 부분이며, 요청하고자 하는 URL에 부가적인 정보를 포함하고 싶을 때 사용한다.</p>\n<p>기존 URL 요청 예시</p>\n<blockquote>\n<p>FE : /list - 리스트 요청\n     /detail - 상세 페이지 요청\nBE : /product - 단일 상품 응답\n     /products - 상품 들 응</p>\n</blockquote>\n<p>만약 상품의 종류가 많아질 경우 /list 페이지에서 모든 상품을 보여주는 것은 비효율적이다.</p>\n<p>예를 들어 1억개의 상품 정보를 모두 불러오는 것도, 비효율적이지만 유저는 판매량이나 최신순 같은 기준을 두고 정렬된 데이터를 보고싶어하는 경우가 일반적이기 때문이다.</p>\n<p>이런 상황에서 FE는 <code>상품 리스트 보여줘 + 최신순 10개</code> 와 같이 구체적인 요청을 할 수 있어야 한다.</p>\n<h4 id=\"쿼리스트링의-형태\">쿼리스트링의 형태</h4>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/99884c4c-74bc-4225-b044-97913bafc707/image.png\" alt=\"\"></p>\n<p>쿼리스트링은 이름 그대로 문자열 타입이며 key = value 로 표현된다. 또한 URL의 일부로 쿼리스트링의 시작점은 <code>?</code> 으로 표시된다.</p>\n<pre><code>&lt;Link to=&quot;/list?sort=popular&quot; /&gt;\n\nnavigate(&quot;/list?sort=popular&quot;)</code></pre><p>쿼리스트링을 포함해서 Routing 하는 방법은 간단히 Link 나 navigate를 이용하면 된다.</p>\n<h4 id=\"페이지네이션\">페이지네이션</h4>\n<p>페이지네이션?</p>\n<p>페이지네이션은 전체 데이터를 페이지 별로 분리해서 보여주는 UI다 페이지네이션을 구현하기 위해선 <code>offset</code> <code>limit</code> 이라는 두 가지 기준이 필요한데, offset 은 몇 번째 아이템 부터 보여줄 것인가. 를 말하는 것이고</p>\n<p>limit 은 한 번에 몇 개를 보여줄 것인가를 말하는 것이다. </p>\n<p>예를들어 페이지당 10개의 아이템을 보여주는 UI를 구현하고 싶다면 </p>\n<p>1페이지 - 0번째 이후 10개 아이템 보여줘 <code>offset = 0번째 이후</code> <code>limit = 10</code> 이 되는 것</p>\n<p><code>?offset=0&amp;limit=10</code> </p>\n<p>물론 프로젝트 마다 offset 이 start 라던지 limit 이 size 라던지 용어는 변경될 수 있다.</p>\n<h4 id=\"구현\">구현</h4>\n<ol>\n<li>URL 정보를 <code>useSearchParams()</code> 훅을 이용해서 가져온다</li>\n<li><code>offset</code> 과 <code>limit</code> 변수에 값을 저장해준다.</li>\n<li>fetch에 백엔드 API 호출하는 offset 과 limit  값으로 위 두 변수 값을 넣어준다.</li>\n<li>불러온 값을 posts state에 저장한다.</li>\n<li>posts 데이터를 이용해서 map 리렌더링</li>\n</ol>\n<p>이 부분은 백엔드와의 협업도 필요한데, 예를 들면 API를 설계할 때 프론트에서 offset 과 limit 값을 설정해서 get 요청을 날릴 것이니, 백엔드에서도 그것을 감안해서 범위에 맞는 데이터만 반환하도록 쿼리를 작성해야한다.</p>\n<pre><code class=\"language-sql\">SELECT * FROM posts LIMIT :limit OFFSET :offset;</code></pre>\n<p>프론트엔드에서는 페이지네이션을 구현하기 위해 현재 페이지 상태를 관리해야한다. 이때 offset 과 limit은 useState를 통해 관리할 수 있다.</p>\n<pre><code class=\"language-javascript\">const [posts, setPosts] = useState([]);\nconst [total, setTotal] = useState(0);\nconst [currentPage, setCurrentPage] = useState(1);\nconst limit = 10;\n\nuseEffect(() =&gt; {\n    const offset = (currentPage - 1) * limit;\n    fetch(`/api/posts?offset=${offset}&amp;limit=${limit}`)\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            setPosts(data.data);\n            setTotal(data.total);\n        });\n}, [currentPage]);</code></pre>\n",
    "pubDate": "Mon, 11 Nov 2024 11:56:13 GMT",
    "thumbnail": null
  },
  {
    "title": "TypeScript 동작원리",
    "link": "https://velog.io/@gawgjiug/TypeScript-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC",
    "description": "<p>모두가 컴퓨터는 인간과는 달리 바이트코드나 기계어, 이진수 같은 단순한 형태의 언어를 기반으로 동작한다는 사실을 알고있다.</p>\n<p>그래서 컴퓨터는 우리가 작성한 코드를 실행하기 위해서 이 코드를 자기가 해석하기 쉬운 형태로 <code>변환</code> 하는 과정을 거치는데, 이 과정을 우리는 <code>컴파일</code> 이라고 부른다.</p>\n<p>그렇게 코드를 <code>컴파일</code> 하는 역할을 하는 녀석을 <code>컴파일러</code> 라고 부르는데, 타입스크립트의 컴파일러는 다른 언어들과 동일하게 먼저 타입스크립트 코드를 AST(추상 문법 트리) 로 변환한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/2ff19487-49f0-4fa5-8003-5e0dbad95a32/image.png\" alt=\"\"></p>\n<p>그 다음 AST를 바이트코드로 변환하는 것이 아니라 AST를 보고 코드 상에 타입 오류가 없는지 검사하는 <code>타입 검사</code> 가 수행됩니다.</p>\n<p>만약 이때 코드에 타입 오류가 발견된다면, 타입 검사가 실패하고, 컴파일이 중단되는 것이다. 만약 타입 오류가 없는 <code>정상적인 코드</code> 라면 타입 검사를 성공적으로 통과하고 그 다음에는 AST를 바이트 코드가 아니라 <code>자바스크립트 코드</code> 로 변환하고, 컴파일이 종료된다.</p>\n<p><img src=\"https://velog.velcdn.com/images/gawgjiug/post/bdfb8e45-f20e-44ea-a572-863873071cec/image.png\" alt=\"\"></p>\n<p>즉, 타입스크립트 코드는 </p>\n<blockquote>\n<p>타입 검사가 완료된 자바스크립트 코드</p>\n</blockquote>\n<p>라는 것이다. 그렇기에 타입 오류가 발생할 가능성이 낮은 <code>안전한 코드</code> 를 제공할 수 있는 것</p>\n<p><a href=\"https://ts.winterlood.com/d67c7b28-c191-46ee-9bdc-2ae8643c2028#438ae44d854f408bae659f045e04bc98\">출처 : 한 입 크기로 잘라먹는 타입스크립트</a></p>\n",
    "pubDate": "Wed, 30 Oct 2024 03:59:51 GMT",
    "thumbnail": null
  }
]